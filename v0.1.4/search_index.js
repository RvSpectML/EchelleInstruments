var documenterSearchIndex = {"docs":
[{"location":"expres/","page":"EXPRES","title":"EXPRES","text":"CurrentModule = EchelleInstruments.EXPRES","category":"page"},{"location":"expres/#EXPRES","page":"EXPRES","title":"EXPRES","text":"","category":"section"},{"location":"expres/","page":"EXPRES","title":"EXPRES","text":"EXPRES","category":"page"},{"location":"expres/#EchelleInstruments.EXPRES","page":"EXPRES","title":"EchelleInstruments.EXPRES","text":"Module providing types and traits and customized functions for the EXPRES Spectrograph.\n\nEXPRES Blog\n\"EXPRES: a next generation RV spectrograph in the search for earth-like worlds\" (Jurgenson et al. 2016)\n\n\n\n\n\n","category":"module"},{"location":"expres/","page":"EXPRES","title":"EXPRES","text":"Pages = [\"EXPRES.md\"]\nDepth = 2","category":"page"},{"location":"expres/#Types","page":"EXPRES","title":"Types","text":"","category":"section"},{"location":"expres/","page":"EXPRES","title":"EXPRES","text":"Modules = [EXPRES ]\nPrivate = false\nOrder = [:type, :constant]","category":"page"},{"location":"expres/#EchelleInstruments.EXPRES.EXPRES1D","page":"EXPRES","title":"EchelleInstruments.EXPRES.EXPRES1D","text":"Trait for 1D Extracted spectra from EXPRES \n\n\n\n\n\n","category":"type"},{"location":"expres/#EchelleInstruments.EXPRES.EXPRES2D","page":"EXPRES","title":"EchelleInstruments.EXPRES.EXPRES2D","text":"Trait for 2D Extracted spectra from EXPRES \n\n\n\n\n\n","category":"type"},{"location":"expres/#EchelleInstruments.EXPRES.AnyEXPRES","page":"EXPRES","title":"EchelleInstruments.EXPRES.AnyEXPRES","text":"Trait to specify any 1D or 2D Extracted spectra from NEID \n\n\n\n\n\n","category":"type"},{"location":"expres/#Functions","page":"EXPRES","title":"Functions","text":"","category":"section"},{"location":"expres/","page":"EXPRES","title":"EXPRES","text":"Modules = [EXPRES]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"expres/#EchelleInstruments.EXPRES.continuum_normalize_spectra!-Union{Tuple{AS}, Tuple{ST}} where AS<:(AbstractArray{ST,N} where N) where ST<:RvSpectMLBase.AbstractSpectra","page":"EXPRES","title":"EchelleInstruments.EXPRES.continuum_normalize_spectra!","text":"Normalize each spectrum based on continuum model from FITS files. \n\n\n\n\n\n","category":"method"},{"location":"expres/#EchelleInstruments.EXPRES.continuum_normalize_spectrum!-Tuple{ST} where ST<:RvSpectMLBase.AbstractSpectra","page":"EXPRES","title":"EchelleInstruments.EXPRES.continuum_normalize_spectrum!","text":"Normalize spectrum based on continuum model from FITS file. \n\n\n\n\n\n","category":"method"},{"location":"expres/#EchelleInstruments.EXPRES.filter_line_list-Union{Tuple{IT}, Tuple{DataFrames.DataFrame,IT}} where IT<:Union{EXPRES1D, EXPRES2D}","page":"EXPRES","title":"EchelleInstruments.EXPRES.filter_line_list","text":"filter_line_list( linelist, inst ; λmin, λmax ) Return DataFrame based on linelist, but filtered to only include lines between λmin and λmax. Defaults for λmin and λmax specified are in traits for EXPRES.\n\n\n\n\n\n","category":"method"},{"location":"expres/#EchelleInstruments.EXPRES.find_worst_telluric_in_each_chunk-Union{Tuple{AS}, Tuple{IT}, Tuple{A3}, Tuple{A2}, Tuple{A1}, Tuple{T3}, Tuple{T2}, Tuple{T1}, Tuple{RvSpectMLBase.AbstractChunkListTimeseries,AbstractArray{AS,1}}} where AS<:RvSpectMLBase.Spectra2DBasic{T1,T2,T3,A1,A2,A3,IT} where IT<:Union{EXPRES1D, EXPRES2D} where A3<:AbstractArray{T3,2} where A2<:AbstractArray{T2,2} where A1<:AbstractArray{T1,2} where T3<:Real where T2<:Real where T1<:Real","page":"EXPRES","title":"EchelleInstruments.EXPRES.find_worst_telluric_in_each_chunk","text":"find_worst_telluric_in_each_chunk( chunk_list_timeseries, spectra ) Return an array of the worst (smallest) telluric for each chunk at any time for the provided ChunkListTimeseries.\n\n\n\n\n\n","category":"method"},{"location":"expres/#RvSpectMLBase.InstrumentsCommon.make_clean_line_list_from_tellurics-Union{Tuple{DT}, Tuple{ST}, Tuple{IT}, Tuple{A3}, Tuple{T3}, Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{DataFrames.DataFrame,DT}} where DT<:AbstractArray{ST,1} where ST<:RvSpectMLBase.Spectra2DBasic{T1,T2,T3,A1,A2,A3,IT} where IT<:Union{EXPRES1D, EXPRES2D} where A3<:(AbstractArray{T3,N} where N) where T3<:Real where A2<:(AbstractArray{T2,N} where N) where T2<:Real where A1<:(AbstractArray{T1,N} where N) where T1<:Real","page":"EXPRES","title":"RvSpectMLBase.InstrumentsCommon.make_clean_line_list_from_tellurics","text":"make_clean_line_list_from_tellurics(line_list, expres_data; Δv_to_avoid_tellurics ) Returns a new line list that excludes lines with telluric contamination. Inputs:\n\nline_list:  Dataframe containing field lambda\nexpres_data:  Array of spectra\nΔv_to_avoid_tellurics:  in m/s\n\nOutputs:\n\nline_list_without_tellurics:   DataFrame with fields: lambda, weight, lambda_lo, and lambda_hi.\n\nWarning: Currently, assumes a tellurics value in metadata for each spectra, such as is provided by EXPRES.\n\n\n\n\n\n","category":"method"},{"location":"expres/#Files","page":"EXPRES","title":"Files","text":"","category":"section"},{"location":"expres/","page":"EXPRES","title":"EXPRES","text":"Modules = [EXPRES]\nOrder = [:file]","category":"page"},{"location":"expres/#Internals","page":"EXPRES","title":"Internals","text":"","category":"section"},{"location":"expres/","page":"EXPRES","title":"EXPRES","text":"Modules = [EXPRES ]\nPublic = false\nOrder = [:type, :function, :module ]","category":"page"},{"location":"expres/#EchelleInstruments.EXPRES.add_metadata_from_fits!-Tuple{DataFrames.DataFrame,String}","page":"EXPRES","title":"EchelleInstruments.EXPRES.add_metadata_from_fits!","text":"add_metadata_from_fits!(df, filename) Return updated dataframe after adding metadata from FITS file header.\n\n\n\n\n\n","category":"method"},{"location":"expres/#EchelleInstruments.EXPRES.blaze_normalize_spectra!-Union{Tuple{AS}, Tuple{ST}} where AS<:(AbstractArray{ST,N} where N) where ST<:RvSpectMLBase.AbstractSpectra","page":"EXPRES","title":"EchelleInstruments.EXPRES.blaze_normalize_spectra!","text":"Normalize each spectrum based on blaze model (also tryies to include black body function) from FITS files. \n\n\n\n\n\n","category":"method"},{"location":"expres/#EchelleInstruments.EXPRES.blaze_normalize_spectrum!-Tuple{ST} where ST<:RvSpectMLBase.AbstractSpectra","page":"EXPRES","title":"EchelleInstruments.EXPRES.blaze_normalize_spectrum!","text":"Normalize spectrum based on blaze model (also tryies to include black body function) from FITS file. \n\n\n\n\n\n","category":"method"},{"location":"expres/#EchelleInstruments.EXPRES.jd2mjd-Tuple{Real}","page":"EXPRES","title":"EchelleInstruments.EXPRES.jd2mjd","text":"Return modified Julian date based on input Julian date\n\n\n\n\n\n","category":"method"},{"location":"expres/#EchelleInstruments.EXPRES.make_manifest-Tuple{String}","page":"EXPRES","title":"EchelleInstruments.EXPRES.make_manifest","text":"Create Dataframe containing filenames and key data for all files neid*.fits in directory\n\n\n\n\n\n","category":"method"},{"location":"expres/#EchelleInstruments.EXPRES.read_data","page":"EXPRES","title":"EchelleInstruments.EXPRES.read_data","text":"Read EXPRES data from FITS file, and return in a Spectra2DBasic object.\n\n\n\n\n\n","category":"function"},{"location":"expres/#EchelleInstruments.EXPRES.read_data-Tuple{DataFrames.DataFrameRow{DataFrames.DataFrame,DataFrames.Index}}","page":"EXPRES","title":"EchelleInstruments.EXPRES.read_data","text":"Read EXPRES data from FITS a file using Filename from a DataFrameRow. Adds other columns from DataFrameRow as metadata. \n\n\n\n\n\n","category":"method"},{"location":"expres/#EchelleInstruments.EXPRES.read_data_only-Tuple{FITSIO.FITS}","page":"EXPRES","title":"EchelleInstruments.EXPRES.read_data_only","text":"Read only EXPRES data from FITS file, and leave metadata empty.\n\n\n\n\n\n","category":"method"},{"location":"expres/#EchelleInstruments.EXPRES.read_data_only-Tuple{String}","page":"EXPRES","title":"EchelleInstruments.EXPRES.read_data_only","text":"Read only EXPRES data from FITS file, and leave metadata empty.\n\n\n\n\n\n","category":"method"},{"location":"expres/#EchelleInstruments.EXPRES.read_metadata-Tuple{FITSIO.FITS,String}","page":"EXPRES","title":"EchelleInstruments.EXPRES.read_metadata","text":"Create Dict containing filename and default metadata from FITS file headers.\n\n\n\n\n\n","category":"method"},{"location":"expres/#EchelleInstruments.EXPRES.read_metadata-Tuple{String}","page":"EXPRES","title":"EchelleInstruments.EXPRES.read_metadata","text":"Create Dict containing filename and default metadata from FITS file headers.\n\n\n\n\n\n","category":"method"},{"location":"expres/#Index","page":"EXPRES","title":"Index","text":"","category":"section"},{"location":"expres/","page":"EXPRES","title":"EXPRES","text":"","category":"page"},{"location":"longlist/","page":"Index","title":"Index","text":"CurrentModule = EchelleInstruments","category":"page"},{"location":"longlist/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"longlist/","page":"Index","title":"Index","text":"Modules = [EchelleInstruments, EchelleInstruments.EXPRES, EchelleInstruments.NEID ] #, EchelleInstruments.HPF, EchelleInstruments.HARPSN ","category":"page"},{"location":"neid/","page":"NEID","title":"NEID","text":"CurrentModule = EchelleInstruments.NEID","category":"page"},{"location":"neid/#NEID","page":"NEID","title":"NEID","text":"","category":"section"},{"location":"neid/","page":"NEID","title":"NEID","text":"NEID","category":"page"},{"location":"neid/#EchelleInstruments.NEID","page":"NEID","title":"EchelleInstruments.NEID","text":"Module providing types and traits and customized functions for the NEID Spectrograph.\n\nNEID blog\n\n\n\n\n\n","category":"module"},{"location":"neid/","page":"NEID","title":"NEID","text":"Pages = [\"neid.md\"]\nDepth = 2","category":"page"},{"location":"neid/#Types","page":"NEID","title":"Types","text":"","category":"section"},{"location":"neid/","page":"NEID","title":"NEID","text":"Modules = [NEID ]\nPrivate = false\nOrder = [:type, :constant]","category":"page"},{"location":"neid/#EchelleInstruments.NEID.NEID1D","page":"NEID","title":"EchelleInstruments.NEID.NEID1D","text":"Trait for 1D Extracted spectra from NEID \n\n\n\n\n\n","category":"type"},{"location":"neid/#EchelleInstruments.NEID.NEID2D","page":"NEID","title":"EchelleInstruments.NEID.NEID2D","text":"Trait for 2D Extracted spectra from NEID \n\n\n\n\n\n","category":"type"},{"location":"neid/#EchelleInstruments.NEID.AnyNEID","page":"NEID","title":"EchelleInstruments.NEID.AnyNEID","text":"Trait to specify any 1D or 2D Extracted spectra from NEID \n\n\n\n\n\n","category":"type"},{"location":"neid/#Functions","page":"NEID","title":"Functions","text":"","category":"section"},{"location":"neid/","page":"NEID","title":"NEID","text":"Modules = [NEID]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"neid/#RvSpectMLBase.InstrumentsCommon.make_clean_line_list_from_tellurics-Union{Tuple{DT}, Tuple{ST}, Tuple{IT}, Tuple{A3}, Tuple{T3}, Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{DataFrames.DataFrame,DT}} where DT<:AbstractArray{ST,1} where ST<:RvSpectMLBase.Spectra2DBasic{T1,T2,T3,A1,A2,A3,IT} where IT<:Union{NEID1D, NEID2D} where A3<:(AbstractArray{T3,N} where N) where T3<:Real where A2<:(AbstractArray{T2,N} where N) where T2<:Real where A1<:(AbstractArray{T1,N} where N) where T1<:Real","page":"NEID","title":"RvSpectMLBase.InstrumentsCommon.make_clean_line_list_from_tellurics","text":"make_clean_line_list_from_tellurics(line_list, neid_data; Δv_to_avoid_tellurics ) Returns a new line list that excludes lines with telluric contamination. Inputs:\n\nline_list:  Dataframe containing field lambda\nneid_data:  Array of spectra\nΔv_to_avoid_tellurics:  in m/s\n\nOutputs:\n\nline_list_without_tellurics:   DataFrame with fields: lambda, weight, lambda_lo, and lambda_hi.\n\nWarning: Currently, reads in a list of wavelength ranges with tellurics and this file was created based on tellurics metadata in EXPRES data for HR 101501.\n\n\n\n\n\n","category":"method"},{"location":"neid/#Internals","page":"NEID","title":"Internals","text":"","category":"section"},{"location":"neid/","page":"NEID","title":"NEID","text":"Modules = [NEID ]\nPublic = false\nOrder = [:type, :function, :module ]","category":"page"},{"location":"neid/#EchelleInstruments.NEID.make_manifest-Tuple{String}","page":"NEID","title":"EchelleInstruments.NEID.make_manifest","text":"Create Dataframe containing filenames and key data for all files neid*.fits in directory\n\n\n\n\n\n","category":"method"},{"location":"neid/#EchelleInstruments.NEID.read_barycentric_corrections!","page":"NEID","title":"EchelleInstruments.NEID.read_barycentric_corrections!","text":"Read CSV of NEID barycentric corrections, interpolate to bjd's in df and insert into df[:,ssb_rv]. \n\n\n\n\n\n","category":"function"},{"location":"neid/#EchelleInstruments.NEID.read_data","page":"NEID","title":"EchelleInstruments.NEID.read_data","text":"Read NEID (non-solar) data from FITS file, and return in a Spectra2DBasic object.\n\n\n\n\n\n","category":"function"},{"location":"neid/#EchelleInstruments.NEID.read_differential_extinctions!","page":"NEID","title":"EchelleInstruments.NEID.read_differential_extinctions!","text":"Read space delimited file with differential extinction corrections, interpolate to bjd's in df and insert into df[:,diffextrv]. \n\n\n\n\n\n","category":"function"},{"location":"neid/#EchelleInstruments.NEID.read_drift_corrections!","page":"NEID","title":"EchelleInstruments.NEID.read_drift_corrections!","text":"Read CSV of NEID drift corrections, interpolate to bjd's in df and insert into df[:,drift]. \n\n\n\n\n\n","category":"function"},{"location":"neid/#EchelleInstruments.NEID.read_metadata-Tuple{String}","page":"NEID","title":"EchelleInstruments.NEID.read_metadata","text":"Create Dict containing filename and default metadata from file.\n\n\n\n\n\n","category":"method"},{"location":"neid/#EchelleInstruments.NEID.read_solar_data","page":"NEID","title":"EchelleInstruments.NEID.read_solar_data","text":"Read NEID Solar data from FITS file, and return in a Spectra2DBasic object.\n\n\n\n\n\n","category":"function"},{"location":"neid/#EchelleInstruments.NEID.read_solar_normalization","page":"NEID","title":"EchelleInstruments.NEID.read_solar_normalization","text":"Read normalization function for approximate solar continuum+blaze correction TODO: Figure out mapping between these orders and what's stored in the FITS file before using. \n\n\n\n\n\n","category":"function"},{"location":"neid/#EchelleInstruments.NEID.read_telluric_ranges-Tuple{String}","page":"NEID","title":"EchelleInstruments.NEID.read_telluric_ranges","text":"readtelluricranges( filename ) Return DataFrame (keys lambdalo and lambdahi) with wavelength ranges to be avoided as containing tellurics based on provided CSV file.  Assumes path is included in filename.\n\n\n\n\n\n","category":"method"},{"location":"neid/#Index","page":"NEID","title":"Index","text":"","category":"section"},{"location":"neid/","page":"NEID","title":"NEID","text":"","category":"page"},{"location":"agnostic/","page":"Instrument agnostic","title":"Instrument agnostic","text":"CurrentModule = EchelleInstruments","category":"page"},{"location":"agnostic/#Instrument-agnostic-interface","page":"Instrument agnostic","title":"Instrument-agnostic interface","text":"","category":"section"},{"location":"agnostic/","page":"Instrument agnostic","title":"Instrument agnostic","text":"Modules = [EchelleInstruments, NEID, EXPRES ]\nPages = [\"agnostic.md\"]\nDepth = 2","category":"page"},{"location":"agnostic/#Modules","page":"Instrument agnostic","title":"Modules","text":"","category":"section"},{"location":"agnostic/","page":"Instrument agnostic","title":"Instrument agnostic","text":"Modules = [EchelleInstruments]\nPrivate = false\nOrder = [:module]","category":"page"},{"location":"agnostic/#EchelleInstruments.EchelleInstruments","page":"Instrument agnostic","title":"EchelleInstruments.EchelleInstruments","text":"Delegates loading of code with functions and parameters specific to different instruments. Subdirectories of src/instruments include provide functions specialized for each instrument, typically the file I/O and pre-processing, so data ends up in a common format. src/instruments/common.jl provides routines that can be shared by instruments.\n\n\n\n\n\n","category":"module"},{"location":"agnostic/#Functions","page":"Instrument agnostic","title":"Functions","text":"","category":"section"},{"location":"agnostic/","page":"Instrument agnostic","title":"Instrument agnostic","text":"Modules = [EchelleInstruments]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"agnostic/#EchelleInstruments.make_manifest-Tuple{String,String,Module}","page":"Instrument agnostic","title":"EchelleInstruments.make_manifest","text":"make_manifest(data_path::String, target_subdir::String, Inst::Module; [opts] ) Returns a dataframe containing a list of files to be read and some metadata (e.g., observation times)\n\nOptional arguements\n\nverbose = true\n\n\n\n\n\n","category":"method"},{"location":"agnostic/#EchelleInstruments.read_fits_header-Tuple{String}","page":"Instrument agnostic","title":"EchelleInstruments.read_fits_header","text":"read_fits_header( filename ) Read header from FITS file and return Dict with contents. Optional inputs:\n\nhdu: Specifies which HDU to read from the FITS file.  (Default: 1)\n\n\n\n\n\n","category":"method"},{"location":"agnostic/#EchelleInstruments.read_manifest-Tuple{String}","page":"Instrument agnostic","title":"EchelleInstruments.read_manifest","text":"Read manifest containing filename, bjd, target, and optionally additional metadata from CSV file. \n\n\n\n\n\n","category":"method"},{"location":"agnostic/#EchelleInstruments.write_manifest-Tuple{String,Any}","page":"Instrument agnostic","title":"EchelleInstruments.write_manifest","text":"Write manifest containing filename, bjd, target, and optionally additional metadata from CSV file. \n\n\n\n\n\n","category":"method"},{"location":"agnostic/#Internals","page":"Instrument agnostic","title":"Internals","text":"","category":"section"},{"location":"agnostic/","page":"Instrument agnostic","title":"Instrument agnostic","text":"Modules = [EchelleInstruments]\nPublic = false\nOrder = [:type, :function]","category":"page"},{"location":"agnostic/#EchelleInstruments.calc_complement_wavelength_ranges-Tuple{DataFrames.DataFrame}","page":"Instrument agnostic","title":"EchelleInstruments.calc_complement_wavelength_ranges","text":"calc_complement_wavelength_ranges( df_in ; lambda_start, lambda_stop ) Return DataFrame with the compliment of wavelength ranges in input DataFrame. Inputs:\n\ndf_in: DataFrame containing lambda_lo and lambda_hi\n\nOptional Inputs:\n\nλ_start:   Output range should start at λ_start rather than first entry in df\nλ_stop:   Output range should end at λ_stop rather than first entry in df\n\nReturns:\n\ndf_out: DataFrame containing lambda_lo and lambda_hi\n\n\n\n\n\n","category":"method"},{"location":"agnostic/#EchelleInstruments.find_ranges_with_tellurics-Union{Tuple{AS}, Tuple{ST}} where AS<:(AbstractArray{ST,N} where N) where ST<:RvSpectMLBase.AbstractSpectra","page":"Instrument agnostic","title":"EchelleInstruments.find_ranges_with_tellurics","text":"find_ranges_with_tellurics( spectra ) Return Dataframe of non-overlapping, sorted wavelength ranges that were marked as having tellurics in any of provided spectra. Calls instrument-specific find_ranges_with_tellurics on each spectrum.\n\n\n\n\n\n","category":"method"},{"location":"agnostic/#EchelleInstruments.make_ranges_without_tellurics-Tuple{DataFrames.DataFrame}","page":"Instrument agnostic","title":"EchelleInstruments.make_ranges_without_tellurics","text":"make_ranges_without_tellurics( telluric_list ; lambda_start, lambda_stop, min_Δv, max_Δv ) Return DataFrame with the compliment of wavelength ranges in input DataFrame. Inputs:\n\ntelluric_list: DataFrame containing lambda_lo and lambda_hi for each wavelength range to be excluded due to tellurics\n\nOptional Inputs:\n\nmin_Δv:  Don't include chunks that are smaller than min_Δv (2*max barycentric correction)\nmax_Δv:  Split up any chunks larger than max_Δv (Inf)\nλ_start:   Output range should start at λ_start rather than first entry in telluric_list\nλ_stop:   Output range should end at λ_stop rather than first entry in telluric_list\n\n\n\n\n\n","category":"method"},{"location":"agnostic/#EchelleInstruments.merge_sorted_wavelength_ranges-Union{Tuple{DataFrames.DataFrame}, Tuple{T}} where T<:Real","page":"Instrument agnostic","title":"EchelleInstruments.merge_sorted_wavelength_ranges","text":"merge_sorted_wavelength_ranges( df; min_Δv_clean ) Return Dataframe of non-overlapping, sorted wavelength ranges (keys lambdalo and lambdahi) that is (approximately) the union of all the wavelength ranges in the input dataframe. minΔvclean limits results included in output. Input dataframe are assumed to be sorted by :lambda_lo\n\n\n\n\n\n","category":"method"},{"location":"agnostic/#EchelleInstruments.read_header-Tuple{FITSIO.FITS}","page":"Instrument agnostic","title":"EchelleInstruments.read_header","text":"read_header( fits_file ) Read header from FITS file and return Dict with contents. Optional inputs:\n\nhdu: Specifies which HDU to read from the FITS file.  (Default: 1)\n\n\n\n\n\n","category":"method"},{"location":"agnostic/#EchelleInstruments.read_header-Tuple{String}","page":"Instrument agnostic","title":"EchelleInstruments.read_header","text":"read_header( filename ) Read header from FITS file and return Dict with contents. Optional inputs:\n\nhdu: Specifies which HDU to read from the FITS file.  (Default: 1)\n\n\n\n\n\n","category":"method"},{"location":"agnostic/#EchelleInstruments.read_metradata_from_fits","page":"Instrument agnostic","title":"EchelleInstruments.read_metradata_from_fits","text":"read_metradata_from_fits( filename, fields ) Read metadata in FITS header for specified keys and return data as a Dict.  fields can be an array of symbols or strings. Optional inputs:\n\nPassing both fields (an array of symbols) and fields_str (an array of strings) as named parameters allows for differences in string used in FITS file and Symbol used in resulting Dict.\nhdu: Specifies which HDU to read from the FITS file.  (Default: 1)\n\n\n\n\n\n","category":"function"},{"location":"agnostic/#Index","page":"Instrument agnostic","title":"Index","text":"","category":"section"},{"location":"agnostic/#Modules-2","page":"Instrument agnostic","title":"Modules","text":"","category":"section"},{"location":"agnostic/","page":"Instrument agnostic","title":"Instrument agnostic","text":"Modules = [EchelleInstruments]\nOrder = [:module]","category":"page"},{"location":"agnostic/#Functions-2","page":"Instrument agnostic","title":"Functions","text":"","category":"section"},{"location":"agnostic/","page":"Instrument agnostic","title":"Instrument agnostic","text":"Modules = [EchelleInstruments]\nOrder = [:function]","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = EchelleInstruments","category":"page"},{"location":"#EchelleInstruments","page":"Home","title":"EchelleInstruments","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [ \"agnostic.md\", \"expres.md\",\"neid.md\"]\nDepth = 2","category":"page"},{"location":"","page":"Home","title":"Home","text":"tip: Tip\nRvSpectMLBase also provides a TheoreticalInstrument module and associated types that can be useful for analyzing simulated data.","category":"page"},{"location":"#Related-Documentation","page":"Home","title":"Related Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"RvSpectMLBase\nRvSpectML\nEchelleInstruments\nEchelleCCFs\nScalpels","category":"page"}]
}
